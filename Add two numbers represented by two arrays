 Input:
Number of elements in set1: 4
Elements are: 9, 9, 9, 9
Number of elements in set 2: 3
Elements are: 1,1,1
Output:
1, 0, 1, 1, 0
Input:
Number of elements in set1: 11
Elements are: 7,2,3,4,5,3,1,2,7,2,8
Number of elements in set 2: 3
Elements are: 1,2,3
Output: 7,2,3,4,5,3,1,2,8,5,1


   
// time complexity : O(n+m)
// space complexity : O(1)
class Solution{
    public:
    string calc_Sum(int *A,int N,int *B,int M){
    
      string res;
        
        int carry = 0, i = N - 1,j = M - 1;
        // O(n+m)
        while(i >= 0 and j >= 0)
        {
            int sum = A[i] + B[j] + carry;
            
            res += (sum % 10) + '0';
            carry = sum / 10;
            
            i--;
            j--;
        }
        
        //O(n)
        while(i >= 0)
        {
            int sum = A[i--] + carry;
            
            res += (sum % 10) + '0';
            carry = sum / 10;
        }
        
        //O(m)
        while(j >= 0)
        {
            int sum = B[j--] + carry;
            
            res += (sum % 10) + '0';
            carry = sum / 10;
        }
        
        if(carry)
            res += carry + '0';
        
        // reverse the string to get result
        reverse(res.begin(), res.end());
        
        int curr = 0;
        // skip the zeros at the front
        while(curr < res.size() and res[curr] == '0')
            curr++;
        //return after zeros
        return res.substr(curr);
    }
};
