 Input : ((abc)((de))
 Output : ((abc)(de))
 Input : (((ab)
 Output : (ab) 

1) Brute force solution

// remove invalid paranthesis
/* C/C++ program to remove invalid parenthesis */
#include <bits/stdc++.h>
using namespace std;

// method checks if character is parenthesis(open
// or closed)
bool isParenthesis(char c)
{
	return ((c == '(') || (c == ')'));
}

// method returns true if string contains valid
// parenthesis
bool isValidString(string str)
{
	int cnt = 0;
	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] == '(')
			cnt++;
		else if (str[i] == ')')
			cnt--;
		if (cnt < 0)
			return false;
	}
	return (cnt == 0);
}

// method to remove invalid parenthesis
void removeInvalidParenthesis(string str)
{
	if (str.empty())
		return ;

	// visit set to ignore already visited string
	set<string> visit;

	// queue to maintain BFS
	queue<string> q;
	string temp;
	bool level;

	// pushing given string as starting node into queue
	q.push(str);
	visit.insert(str);
	while (!q.empty())
	{
		str = q.front(); q.pop();
		if (isValidString(str))
		{
			cout << str << endl;

			// If answer is found, make level true
			// so that valid string of only that level
			// are processed.
			level = true;
		}
		if (level)
			continue;
		for (int i = 0; i < str.length(); i++)
		{
			if (!isParenthesis(str[i]))
				continue;

			// Removing parenthesis from str and
			// pushing into queue,if not visited already
			temp = str.substr(0, i) + str.substr(i + 1);
			if (visit.find(temp) == visit.end())
			{
				q.push(temp);
				visit.insert(temp);
			}
		}
	}
}

// Driver code to check above methods
int main()
{
	string expression = "()())()";
	removeInvalidParenthesis(expression);

	expression = "()v)";
	removeInvalidParenthesis(expression);

	return 0;
}


2) Optimized approach

// Time complexity : O(n)
// Space complexity : O(1)
#include <iostream>
using namespace std;

void deleteBrackets(string &str, char ch, int totalCount)
{
	int count = 0;
	string curStr = "";
	
	for(auto val : str)
	{
		// if val is equal to ch, increase the count
		if(val == ch)
		count++;
		
		// if count <= limit or cur val is not equal to ch, then add it to result
		if(count <= totalCount || val != ch)
		{
			curStr += val;
		}
		
	}
	
	str = curStr;
}

int main()
{
	string str;
	cin >> str;
	
	// count total number of '(' and ')' 
	int openBracketCount = 0, closeBracketCount = 0;
	
	for(auto ch : str)
	{
		if(ch == '(') 
		openBracketCount++;
		
		else if(ch == ')')
		closeBracketCount++;
	}
	
	// if anyone is larger, then we need to remove the largest one
	if(openBracketCount > closeBracketCount)
	{
		deleteBrackets(str, '(', closeBracketCount);
	}
	else if(openBracketCount < closeBracketCount){
		deleteBrackets(str, ')', openBracketCount);
	}
	
	cout << str << endl;
	
	return 0;
}
