Eg 1: Input: 13,2 4,15,12,10,5
 Output: 13,2,12,10,5,15,4
Eg 2: Input: 1,2,3,4,5,6,7,8,9
 Output: 9,2,7,4,5,6,3,8,1 



Solution 1 :
// Time complexity : O(n * n)
// Space complexity : O(1)
#include <iostream>
using namespace std;

class Rearrange
{
	public :
	void rearrangeElements(int arr[], int n, char pos)
	{
		int startIdx = 0;
		
		if(pos == 'e') startIdx = 1;
		
	    for(int i = startIdx; i < n; i+=2)
	    {
	    	for(int j = startIdx; j < n; j+=2)
	    	{
	    		// if its pos is odd, then sort based on descending order
	    		if(pos == 'o')
	    		{
	    			if(arr[i] > arr[j])
	    			{
	    				swap(arr[i], arr[j]);
					}
				}
				// else sort based on ascending order
				else if(pos == 'e')
				{
					if(arr[i] < arr[j])
	    			{
	    				swap(arr[i], arr[j]);
					}
				}
			}
		}
	}
};



int main()
{	
	int arr[] = {13,2,4,15,12,10,5};
    
    int n = sizeof(arr)/sizeof(arr[0]);
    
    Rearrange obj;
    
    // sort descending order in odd position
    obj.rearrangeElements(arr, n, 'o');

	// sort ascending order in even position
    obj.rearrangeElements(arr, n, 'e');
	    
    for(int i = 0; i < n; i++)
    cout << arr[i] << " ";
		
	return 0;
}



Solution 2 :
Time complexity : O(nlogn)
space complexity: O(n)
#include <bits/stdc++.h>
using namespace std;

int main() {
    vector<int> a{13,2,4,15,12,10,5};
    
    int n = a.size();
    
    vector<int> even, odd;
    
    for(int i=0; i<n; i++)
    {
    	if(i & 1) odd.push_back(a[i]);
    	else even.push_back(a[i]);
    }
    
    sort(even.begin(), even.end(), greater<int>());
    sort(odd.begin(), odd.end());
    
    int i = 0, j = 0;
    for(int k=0; k<n; k++)
    {
    	if(k & 1) cout << odd[j++] << " ";
    	else cout << even[i++] << " ";
    }
    
	
	return 0;
}
