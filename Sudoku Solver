Input:

board = 
[["5","3",".",".","7",".",".",".","."],
["6",".",".","1","9","5",".",".","."],
[".","9","8",".",".",".",".","6","."],
["8",".",".",".","6",".",".",".","3"],
["4",".",".","8",".","3",".",".","1"],
["7",".",".",".","2",".",".",".","6"],
[".","6",".",".",".",".","2","8","."],
[".",".",".","4","1","9",".",".","5"],
[".",".",".",".","8",".",".","7","9"]]

Output: 
[["5","3","4","6","7","8","9","1","2"],
["6","7","2","1","9","5","3","4","8"],
["1","9","8","3","4","2","5","6","7"],
["8","5","9","7","6","1","4","2","3"],
["4","2","6","8","5","3","7","9","1"],
["7","1","3","9","2","4","8","5","6"]
,["9","6","1","5","3","7","2","8","4"],
["2","8","7","4","1","9","6","3","5"],
["3","4","5","2","8","6","1","7","9"]]

class Solution {
public:
    bool isSafeToPlace(vector<vector<char>> &board, int r, int c, char num)
    {
        // check in row
        for(int i = 0; i < 9; i++)
        {
            if(board[r][i] == num) 
                return false;
        }
        
        // check in col
        for(int i = 0; i < 9; i++)
        {
            if(board[i][c] == num)
                return false;
        }
        
        int curRow = r - (r % 3) , curCol = c - (c % 3);
        
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(board[curRow+i][curCol+j] == num)
                    return false;
            }
        }
        
        
        return true;
    }
    
    bool solveSudoku(vector<vector<char>> &board, int r, int c)
    {
        if(r == 9) return true;
        if(c == 9) return solveSudoku(board, r+1, 0);
        if(board[r][c] != '.') return solveSudoku(board, r, c+1);
        
        for(char num = '1'; num <= '9'; num++)
        {
            if(isSafeToPlace(board, r, c, num))
            {
                board[r][c] = num;
                
                if(solveSudoku(board, r, c+1)) 
                    return true;
                
                board[r][c] = '.';
            }
        }
        
        return false;
    }
    
    void solveSudoku(vector<vector<char>>& board) {
        
        solveSudoku(board, 0, 0);
    }
};
