 Input : {1, 2, 3, 4, 5, 6, 7}
 Output : {7, 1, 6, 2, 5, 3, 4} 


#include <bits/stdc++.h>
using namespace std;

void merge(vector<int>& a,int l,int mid,int r)
{
	int n1 = mid - l + 1 , n2 = r - mid;
	int left[n1] , right[n2];
	
	for(int i=0;i<n1; i++)
	left[i] = a[l+i]; 
	
	for(int i=0;i<n2; i++)
	right[i] = a[mid+1+i]; 
	
	int i = 0 ,  j = 0 , k = l ;
	while(i < n1 && j < n2)
	{
		if(left[i] <= right[j])
		{
			a[k++] = left[i++];
		}
		else
		{
			a[k++] = right[j++];
		}
	}
	
	while(i < n1) 	a[k++] = left[i++];
	
	while(j < n2)   a[k++] = right[j++];
	
}

void mergeSort(vector<int>& a,int l,int r)
{
	if(l < r)
	{
		int mid = l + (r - l) / 2;
		
		mergeSort(a,l,mid);
		mergeSort(a,mid+1,r);
		
		merge(a,l,mid,r);
	}
}

void bubbleSort(vector<int>& a,int n)
{
	for(int i=0; i<n; i++)
	{
		for(int j=0; j< n-1-i; j++)
		{
			if(a[j] > a[j+1])
			swap(a[j] , a[j+1]);
		}
	}
}

int partition(vector<int>& a,int l,int r)
{
	int i = l-1 , pivot = a[r];
	
	for(int j=l; j<r; j++)
	{
		if(a[j] < pivot)
			swap(a[++i], a[j]);
	}
	
	swap(a[r], a[i+1]);
	
	return i+1;
}

void quickSort(vector<int>& a,int l,int r)
{
	if(l < r)
	{
		int pi = partition(a,l,r);
		
		quickSort(a,l,pi-1);
		quickSort(a,pi+1,r);
	}
}

int main() {
	vector<int> a{7, 1, 2, 3, 4, 5, 6};
	int n = a.size();
	
//	mergeSort(a,0,n-1);
//	bubbleSort(a,n);
    quickSort(a,0,n-1);
	
	//printing array
	for(int i=0; i<n; i++)
	cout << a[i] << " "; 
	cout << endl;
	
	//alternate sorting
	int i = 0 , j = n-1;
	while(i < j)
		cout << a[j--] << " " << a[i++] << " ";

	if(n & 1) cout << a[i] ;
	
	return 0;
}
