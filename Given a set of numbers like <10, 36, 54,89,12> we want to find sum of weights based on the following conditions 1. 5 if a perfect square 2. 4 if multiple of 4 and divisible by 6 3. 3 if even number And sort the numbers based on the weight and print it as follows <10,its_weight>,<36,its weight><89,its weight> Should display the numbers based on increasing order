O/P :
89 0
10 3
12 7
54 8
36 12

1) Without using inbuilt function
// Time complexity : O(n + nlogn) = O(nlogn)
// Space complexity : O(n +  n) = O(n)
#include <iostream>
using namespace std;

int partition(int barr[][2], int low, int high)
{
	int i = low - 1, pivot = barr[high][1];
	for(int j = low; j <= high; j++)
	{
		if(pivot > barr[j][1])
		{
			// swapping
			++i;
			
			swap(barr[i][1], barr[j][1]);
			swap(barr[i][0], barr[j][0]);
		}
	}
	
	swap(barr[i+1][1], barr[high][1]);
	swap(barr[i+1][0], barr[high][0]);
	
	return i+1;
}

// quicksort
void sortWeights(int barr[][2], int low, int high)
{
	if(low > high) return;
	
	int pivot = partition(barr, low, high);
	
	sortWeights(barr, low, pivot-1);
	sortWeights(barr, pivot + 1, high);
	
}

bool isPerfectSquare(int n)
{
	int low = 1, high = n;
	while(low <= high)
	{
		int mid = low + (high - low) / 2;
		
		if(mid * mid == n) return true;
		
		if(mid * mid > n) 
		{
			high = mid - 1;
		}
		
		else 
		{
			low = mid + 1;
		}
	}
	
	return false;
}

void findSumWeights(int arr[], int n, int barr[][2])
{
	for(int i = 0; i < n; i++)
	{
		int curWeight = 0;
		if(isPerfectSquare(arr[i]))
		{
			curWeight += 5;
		}
		
		if(arr[i] % 4 == 0 && arr[i] % 6 == 0)
		{
			curWeight += 4;
		}
		
		if(arr[i] % 2 == 0)
		{
			curWeight += 3;
		}
		
		barr[i][0] = arr[i];
		barr[i][1] = curWeight;
	}
}

void print(int barr[][2], int n)
{
	cout << "Values and their weights : \n";
	for(int i = 0; i < n; i++)
	{
		cout << barr[i][0] << " " << barr[i][1] << endl;
	}
}

int main() {
	
	int arr[] = {10, 36, 54, 89, 12};
	int n = sizeof(arr) / sizeof(arr[0]);
	
	/*
		1. 5 if a perfect square
		2. 4 if multiple of 4 and divisible by 6
		3. 3 if even number
	
	*/
	int barr[n][2] ;
	findSumWeights(arr, n, barr);      // O(n)
	sortWeights(barr, 0, n-1);		   // O(nlogn)
	print(barr, n);					  
	
	return 0;
}

2) using inbuilt function

// Time complexity : O(n + nlogn) = O(nlogn)
// Space complexity : O(1)

#include <bits/stdc++.h>
using namespace std;

int main() {
	vector<int> a{10, 36, 54,89,12};
	
	int n = a.size();
	vector<pair<int,int>> res;
	for(int i=0; i<n; i++)
	{
		int s = 0 , cur = a[i];
		if(sqrt(cur) * sqrt(cur) == cur)
	    s += 5;
	    if(cur % 4 == 0 && cur % 6 == 0) 
	    s += 4;
	    if(cur % 2 == 0) 
	    s += 3;
	    
	    res.push_back({a[i],s});
	}
	
	sort(res.begin(),res.end(),[](const pair<int,int> a,const pair<int,int> b)
	{
		if(a.second != b.second) return a.second < b.second;
		
		return a.first < b.first;
	});
	
	for(auto v : res)
	cout << v.first << " " << v.second << endl;
	
	return 0;
}
