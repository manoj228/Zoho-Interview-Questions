Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


class Solution {
    private :
    bool isValidRow(vector<vector<char>> &board, int r, int c, int curNum)
    {
        for(int i = 0; i < board[0].size(); i++)
        {
            if(i != c && board[r][i] == curNum)
                return false;
        }
        
        return true;
    }
    
    bool isValidCol(vector<vector<char>> &board, int r, int c, int curNum)
    {
        for(int i = 0; i < board.size(); i++)
        {
            if(i != r && board[i][c] == curNum)
                return false;
        }
        
        return true;
    }
    
    bool isValidGrid(vector<vector<char>> &board,int r, int c, int curNum)
    {
        int curR = r - (r % 3) , curC = c - (c % 3);
        
        for(int i = 0; i < 3; i++)
        {
            for(int j = 0; j < 3; j++)
            {
                if(curR + i != r && curC + j != c && board[curR + i][curC + j] == curNum)
                    return false;
            }
        }
        
        return true;
    }
    
public:
    bool isValidSudoku(vector<vector<char>> board, int i, int j, int curNum)
    {
        return isValidRow(board, i, j, curNum) && 
               isValidCol(board, i, j, curNum) &&
               isValidGrid(board, i, j, curNum);
    }
    
    bool isValidSudoku(vector<vector<char>>& board) {
        
        int row = board.size(), col = board[0].size();
        
        for(int i = 0; i < row; i++)
        {
            for(int j = 0; j < col; j++)
            {
                if(board[i][j] != '.')
                {
                    if(!isValidSudoku(board, i, j, board[i][j]))
                        return false;
                }
            }
        }
        
        return true;
        
    }
};
