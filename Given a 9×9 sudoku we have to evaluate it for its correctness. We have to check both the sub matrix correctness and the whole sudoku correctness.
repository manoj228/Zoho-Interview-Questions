Input:
grid[][] = 
[[3 0 6 5 0 8 4 0 0],
[5 2 0 0 0 0 0 0 0],
[0 8 7 0 0 0 0 3 1 ],
[0 0 3 0 1 0 0 8 0],
[9 0 0 8 6 3 0 0 5],
[0 5 0 0 9 0 6 0 0],
[1 3 0 0 0 0 2 5 0],
[0 0 0 0 0 0 0 7 4],
[0 0 5 2 0 6 3 0 0]]
Output:
3 1 6 5 7 8 4 9 2
5 2 9 1 3 4 7 6 8
4 8 7 6 2 9 5 3 1
2 6 3 4 1 5 9 8 7
9 7 4 8 6 3 1 2 5
8 5 1 7 9 2 6 4 3
1 3 8 9 4 7 2 5 6
6 9 2 3 5 1 8 7 4
7 4 5 2 8 6 3 1 9

#include <bits/stdc++.h>
using namespace std;
#define N 9

bool possible(int grid[N][N],int i,int j,int num)
{
    int row = i - i%3 , col = j - j%3;
    for(int x=0; x<N; x++) if(grid[x][j] == num) return false;
    for(int y=0; y<N; y++) if(grid[i][y] == num) return false;
    for(int x=0; x<3; x++)
    {
        for(int y=0; y<3; y++)
        if(grid[x+row][y+col] == num) return false;
    }
    
    return true;
}

bool solve(int grid[N][N],int i,int j)
{
    if(i == 9) return true;
    if(j == 9) return solve(grid,i+1,0);
    if(grid[i][j] != 0) return solve(grid,i,j+1);
    
    for(int c=1; c<=9; c++)
    {
        if(possible(grid,i,j,c))
        {
            grid[i][j] = c;
            
            if(solve(grid,i,j+1)) 
            return true;
            
            grid[i][j] = 0;
        }
    }
    

    return false;
}

bool SolveSudoku(int grid[N][N])  
{ 
    return solve(grid,0,0);
}

void printGrid (int grid[N][N]) 
{
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        cout << grid[i][j] <<" ";
        cout << endl;
    }
}


int main() {
	int grid[][N] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},
	                {5, 2, 0, 0, 0, 0, 0, 0, 0},
	                {0, 8, 7, 0, 0, 0, 0, 3, 1},
	                {0, 0, 3, 0, 1, 0, 0, 8, 0},
	                {9, 0, 0, 8, 6, 3, 0, 0, 5},
	                {0, 5, 0, 0, 9, 0, 6, 0, 0},
	                {1, 3, 0, 0, 0, 0, 2, 5, 0},
	                {0, 0, 0, 0, 0, 0, 0, 7, 4},
	                {0, 0, 5, 2, 0, 6, 3, 0, 0}};
	                
	SolveSudoku(grid);
	printGrid(grid);
	return 0;
}
